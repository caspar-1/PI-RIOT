
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>


int spi_fd = -1;
const char * p_dev ="/dev/spidev1.0";


static int init_spi(){

	uint8_t mode=0;
    int spi_speed = 1000000;
    
    //mode |= SPI_LOOP; 
	//mode |= SPI_CPHA; 
	//mode |= SPI_CPOL; 
	//mode |= SPI_LSB_FIRST; 
	//mode |= SPI_CS_HIGH; 
	//mode |= SPI_3WIRE; 
	//mode |= SPI_NO_CS; 
	//mode |= SPI_READY;
	 
	

	/* Opening file stream */
	spi_fd = open(p_dev, O_RDWR | O_NOCTTY);
	if(spi_fd < 0){
		printf("Error opening spidev0.1. Error: %s\n", strerror(errno));
		return -1;
	}

	/* Setting mode (CPHA, CPOL) */
	if(ioctl(spi_fd, SPI_IOC_WR_MODE, &mode) < 0){
		printf("Error setting SPI MODE. Error: %s\n", strerror(errno));
		return -1;
	}

	/* Setting SPI bus speed */
	if(ioctl(spi_fd, SPI_IOC_WR_MAX_SPEED_HZ, &spi_speed) < 0){
		printf("Error setting SPI MAX_SPEED_HZ. Error: %s\n", strerror(errno));
		return -1;
	}

	return 0;
}

static int release_spi(){

	/* Release the spi resources */
	close(spi_fd);
	return 0;
}

int spiTransfer(unsigned char *sendBuffer, unsigned char *receiveBuffer, int bytes)
{
    struct spi_ioc_transfer xfer;
    memset(&xfer, 0, sizeof(xfer));
    xfer.tx_buf = (unsigned long)sendBuffer;
    xfer.rx_buf = (unsigned long)receiveBuffer;
    xfer.len = bytes;

    int res = ioctl(spi_fd, SPI_IOC_MESSAGE(1), &xfer);
    
    return res;
}

static int write_spi(char *write_buffer, int size){

	int write_spi = write(spi_fd, write_buffer, strlen(write_buffer));

	if(write_spi < 0){
		printf("Failed to write to SPI. Error: %s\n", strerror(errno));
		return -1;
	}

	return 0;
}

int read_spi(char *read_buffer, int size){

	int read_spi = read(spi_fd, read_buffer, strlen(read_buffer));

	if(write_spi < 0){
		printf("Failed to write to SPI. Error: %s\n", strerror(errno));
		return -1;
	}

	return 0;
}






void spi_init(spi_t bus)
{
}

void spi_init_pins(spi_t bus)
{
}

int spi_init_cs(spi_t bus, spi_cs_t cs)
{
    return 0;
}

int spi_acquire(spi_t bus, spi_cs_t cs, spi_mode_t mode, spi_clk_t clk)
{
    return 0;
}

void spi_release(spi_t bus)
{
}

uint8_t spi_transfer_byte(spi_t bus, spi_cs_t cs, bool cont, uint8_t out)
{
    return 0;
}

void spi_transfer_bytes(spi_t bus, spi_cs_t cs, bool cont, const void *out, void *in, size_t len)
{
}

void spi_transfer_regs(spi_t bus, spi_cs_t cs, uint8_t reg, const void *out, void *in, size_t len)
{
}